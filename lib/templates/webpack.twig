const process = require('process');
const CopyWebpackPlugin = require('copy-webpack-plugin');
const MiniCssExtractPlugin = require("mini-css-extract-plugin");
const webpack = require('webpack');
const path = require('path');

console.log(process.argv);

let full_config = {
  devtool: "source-map",
  entry: {
    main: '{{ input }}{{ inputFile }}.js'
  },
  output: {
    path: path.resolve(__dirname, '{{ output }}'),
    filename: '[folder]/[name].min.[ext]'
  },
  plugins: [
    new webpack.ProvidePlugin({
      $: 'jquery',
      jQuery: 'jquery',
      'window.jQuery': 'jquery'
    }),
    new MiniCssExtractPlugin({
      filename: "css/style.min.css",
      chunkFilename: "css/[id].css"
    }),
    new CopyWebpackPlugin([
      { from: '{{ input }}/img', to: 'img' }
    ])
  ],
  module: {
    rules: [
      {
        test: /\.js$/,
        exclude: /node_modules/,
        use: {
          loader: "babel-loader",
          query: {
            presets: ["@babel/preset-env"]
          }
        }
      },
      {
        test: /\.(eot|otf|webp|ttf|woff|woff2|svg)(\?.*)?$/,
        use: [
          {
            loader: "file-loader",
            options: {
              name: '[name].[ext]',
              outputPath: '{{ output }}/fonts',
              publicPath: '../fonts/'
            }
          },
        ],
      },
      {
        test: /\.(png|jpg|gif)(\?.*)?$/,
        use: [
          {
            loader: "file-loader",
            options: {
              emitFile: true,
              name: '[folder]/[name].[ext]',
              outputPath: './img/',
              publicPath: '{{ imgPath }}',
            }
          },
        ],
      },
      {
        test: /\.(sa|sc|c)ss$/,
        use: [
          MiniCssExtractPlugin.loader,
          'css-loader',
          'resolve-url-loader',
          'sass-loader?sourceMap',
        ],
      }
    ]
  }
};

let sass_config = {
  devtool: "source-map",
  entry: {
    main: '{{ input }}{{ inputFile }}'
  },
  output: {
    path: path.resolve(__dirname, '{{ output }}'),
    filename: 'js/[name].min.js'
  },
  plugins: [
    new MiniCssExtractPlugin({
      filename: "css/style.min.css",
      chunkFilename: "css/[id].css"
    }),
    new CopyWebpackPlugin([
      { from: '{{ input }}/img', to: 'img' }
    ])
  ],
  module: {
    rules: [
      {
        test: /\.js$/,
        exclude: /node_modules/,
        use: {
          loader: "babel-loader",
          query: {
            presets: ["@babel/preset-env"]
          }
        }
      },
      {
        test: /\.(eot|otf|webp|ttf|woff|woff2|svg)(\?.*)?$/,
        use: [
          {
            loader: "file-loader",
            options: {
              name: '[name].[ext]',
              outputPath: '{{ output }}/fonts',
              publicPath: '../fonts/'
            }
          },
        ],
      },
      {
        test: /\.(png|jpg|gif)(\?.*)?$/,
        use: [
          {
            loader: "file-loader",
            options: {
              emitFile: true,
              name: '[folder]/[name].[ext]',
              outputPath: './img/',
              publicPath: '{{ imgPath }}/public/img',
            }
          },
        ],
      },
      {
        test: /\.(sa|sc|c)ss$/,
        use: [
          MiniCssExtractPlugin.loader,
          'css-loader',
          'resolve-url-loader',
          'sass-loader?sourceMap',
        ],
      }
    ]
  }
};


module.exports = full_config;